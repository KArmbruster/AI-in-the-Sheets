/**
 * @license
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Creates a custom menu in the Google Sheets UI when the spreadsheet is opened.
 */
function onOpen() {
  SpreadsheetApp.getUi()
      .createMenu('Gemini AI')
      .addItem('Set API Key', 'setApiKey')
      .addToUi();
}

/**
 * Prompts the user to set their Gemini API key and stores it in script properties.
 */
function setApiKey() {
  const ui = SpreadsheetApp.getUi();
  const response = ui.prompt('Set Gemini API Key', 'Please enter your Gemini API key:', ui.ButtonSet.OK_CANCEL);

  if (response.getSelectedButton() == ui.Button.OK) {
    const apiKey = response.getResponseText();
    PropertiesService.getScriptProperties().setProperty('GEMINI_API_KEY', apiKey);
    ui.alert('API key saved successfully.');
  }
}

/**
 * A custom function to call the Gemini API from a sheet cell.
 * It can accept a single cell or a range of cells.
 *
 * @param {string|string[][]} prompt_range The cell or range of cells for the prompt.
 * @param {number} [temperature=0] (Optional) A number between 0.0 and 1.0. Defaults to 0.
 * @return The text generated by the Gemini API.
 * @customfunction
 */
function GEMINI(prompt_range, temperature = 0) { // UPDATED DEFAULT
  if (!prompt_range) {
    return "Error: Prompt cannot be empty.";
  }

  let prompt_text = '';
  if (Array.isArray(prompt_range)) {
    // If the input is a range (2D array), flatten and join the values.
    prompt_text = prompt_range.flat().join(' ');
  } else {
    // If the input is a single cell value.
    prompt_text = prompt_range;
  }

  if (!prompt_text.trim()) {
    return "Error: Prompt text is empty after combining cells.";
  }

  return callGeminiAPI(prompt_text, temperature);
}


/**
 * A helper function that handles the actual API call to Gemini.
 *
 * @param {string} prompt The text prompt to send to the API.
 * @param {number} [temperature=0] (Optional) The temperature for the generation.
 * @return {string} The generated text from the API.
 */
function callGeminiAPI(prompt, temperature = 0) { // UPDATED DEFAULT
  const apiKey = PropertiesService.getScriptProperties().getProperty('GEMINI_API_KEY');
  if (!apiKey) {
    throw new Error("Gemini API key not set. Please set it via the 'Gemini AI' > 'Set API Key' menu.");
  }

  const model = 'gemini-2.5-flash-lite-preview-06-17';
  const api = 'generateContent';
  const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:${api}?key=${apiKey}`;

  const payload = {
    contents: [{
      parts: [{
        text: prompt
      }]
    }],
    generationConfig: {
      temperature: temperature,
    }
  };

  const options = {
    method: 'POST',
    contentType: 'application/json',
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  try {
    const response = UrlFetchApp.fetch(url, options);
    const responseCode = response.getResponseCode();
    const responseBody = response.getContentText();

    if (responseCode === 200) {
      const data = JSON.parse(responseBody);
      if (data.candidates && data.candidates.length > 0 && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts.length > 0) {
        return data.candidates[0].content.parts[0].text.trim();
      } else {
        const candidate = data.candidates && data.candidates[0];
        if (candidate && candidate.finishReason !== "STOP") {
          return `API call finished with reason: ${candidate.finishReason}`;
        }
        return "Error: Received an empty or invalid response from the API.";
      }
    } else {
      let errorMessage = `API call failed with response code ${responseCode}.`;
      try {
        const errorResponse = JSON.parse(responseBody);
        if (errorResponse.error && errorResponse.error.message) {
          errorMessage += ` Message: ${errorResponse.error.message}`;
        }
      } catch (e) {
        errorMessage += ` Could not parse error response body: ${responseBody}`;
      }
      throw new Error(errorMessage);
    }
  } catch (e) {
    throw new Error(`Failed to call the Gemini API: ${e.message}`);
  }
}
